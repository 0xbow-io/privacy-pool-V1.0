/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivacyPool {
  export type ProofStruct = {
    proof: BytesLike;
    root: BytesLike;
    inputNullifiers: [BytesLike, BytesLike];
    outputCommitments: [BytesLike, BytesLike];
    publicAmount: BigNumberish;
    extDataHash: BytesLike;
  };

  export type ProofStructOutput = [
    proof: string,
    root: string,
    inputNullifiers: [string, string],
    outputCommitments: [string, string],
    publicAmount: bigint,
    extDataHash: string
  ] & {
    proof: string;
    root: string;
    inputNullifiers: [string, string];
    outputCommitments: [string, string];
    publicAmount: bigint;
    extDataHash: string;
  };

  export type ExtDataStruct = {
    recipient: AddressLike;
    extAmount: BigNumberish;
    relayer: AddressLike;
    fee: BigNumberish;
    encryptedOutput1: BytesLike;
    encryptedOutput2: BytesLike;
    membershipProofURI: string;
  };

  export type ExtDataStructOutput = [
    recipient: string,
    extAmount: bigint,
    relayer: string,
    fee: bigint,
    encryptedOutput1: string,
    encryptedOutput2: string,
    membershipProofURI: string
  ] & {
    recipient: string;
    extAmount: bigint;
    relayer: string;
    fee: bigint;
    encryptedOutput1: string;
    encryptedOutput2: string;
    membershipProofURI: string;
  };
}

export interface PrivacyPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIELD_SIZE"
      | "MAX_EXT_AMOUNT"
      | "MAX_FEE"
      | "ROOT_HISTORY_SIZE"
      | "ZERO_VALUE"
      | "__gap"
      | "calculatePublicAmount"
      | "currentRootIndex"
      | "filledSubtrees"
      | "getLastRoot"
      | "hashLeftRight"
      | "hasher"
      | "isKnownRoot"
      | "isSpent"
      | "levels"
      | "maximumDepositAmount"
      | "nextIndex"
      | "nullifierHashes"
      | "roots"
      | "transact"
      | "verifier2"
      | "verifyProof"
      | "zeros"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewCommitment"
      | "NewNullifier"
      | "NewTxRecord"
      | "NewWithdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_EXT_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "__gap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePublicAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isSpent", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maximumDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullifierHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transact",
    values: [PrivacyPool.ProofStruct, PrivacyPool.ExtDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "verifier2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [PrivacyPool.ProofStruct]
  ): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_EXT_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "__gap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePublicAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSpent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullifierHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;
}

export namespace NewCommitmentEvent {
  export type InputTuple = [
    commitment: BytesLike,
    index: BigNumberish,
    encryptedOutput: BytesLike
  ];
  export type OutputTuple = [
    commitment: string,
    index: bigint,
    encryptedOutput: string
  ];
  export interface OutputObject {
    commitment: string;
    index: bigint;
    encryptedOutput: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewNullifierEvent {
  export type InputTuple = [nullifier: BytesLike];
  export type OutputTuple = [nullifier: string];
  export interface OutputObject {
    nullifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTxRecordEvent {
  export type InputTuple = [
    inputNullifier1: BytesLike,
    inputNullifier2: BytesLike,
    outputCommitment1: BytesLike,
    outputCommitment2: BytesLike,
    publicAmount: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    inputNullifier1: string,
    inputNullifier2: string,
    outputCommitment1: string,
    outputCommitment2: string,
    publicAmount: bigint,
    index: bigint
  ];
  export interface OutputObject {
    inputNullifier1: string;
    inputNullifier2: string;
    outputCommitment1: string;
    outputCommitment2: string;
    publicAmount: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewWithdrawalEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    membershipProofURI: string,
    inputNullifiers: [BytesLike, BytesLike]
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    membershipProofURI: string,
    inputNullifiers: [string, string]
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    membershipProofURI: string;
    inputNullifiers: [string, string];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyPool extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyPool;
  waitForDeployment(): Promise<this>;

  interface: PrivacyPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  MAX_EXT_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  __gap: TypedContractMethod<[], [bigint], "view">;

  calculatePublicAmount: TypedContractMethod<
    [_extAmount: BigNumberish, _fee: BigNumberish],
    [bigint],
    "view"
  >;

  currentRootIndex: TypedContractMethod<[], [bigint], "view">;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getLastRoot: TypedContractMethod<[], [string], "view">;

  hashLeftRight: TypedContractMethod<
    [_left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  isKnownRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isSpent: TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  maximumDepositAmount: TypedContractMethod<[], [bigint], "view">;

  nextIndex: TypedContractMethod<[], [bigint], "view">;

  nullifierHashes: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transact: TypedContractMethod<
    [_args: PrivacyPool.ProofStruct, _extData: PrivacyPool.ExtDataStruct],
    [void],
    "payable"
  >;

  verifier2: TypedContractMethod<[], [string], "view">;

  verifyProof: TypedContractMethod<
    [_args: PrivacyPool.ProofStruct],
    [boolean],
    "view"
  >;

  zeros: TypedContractMethod<[i: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_EXT_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "__gap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePublicAmount"
  ): TypedContractMethod<
    [_extAmount: BigNumberish, _fee: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentRootIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [_left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isKnownRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSpent"
  ): TypedContractMethod<[_nullifierHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nullifierHashes"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transact"
  ): TypedContractMethod<
    [_args: PrivacyPool.ProofStruct, _extData: PrivacyPool.ExtDataStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifier2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<[_args: PrivacyPool.ProofStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "zeros"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;

  getEvent(
    key: "NewCommitment"
  ): TypedContractEvent<
    NewCommitmentEvent.InputTuple,
    NewCommitmentEvent.OutputTuple,
    NewCommitmentEvent.OutputObject
  >;
  getEvent(
    key: "NewNullifier"
  ): TypedContractEvent<
    NewNullifierEvent.InputTuple,
    NewNullifierEvent.OutputTuple,
    NewNullifierEvent.OutputObject
  >;
  getEvent(
    key: "NewTxRecord"
  ): TypedContractEvent<
    NewTxRecordEvent.InputTuple,
    NewTxRecordEvent.OutputTuple,
    NewTxRecordEvent.OutputObject
  >;
  getEvent(
    key: "NewWithdrawal"
  ): TypedContractEvent<
    NewWithdrawalEvent.InputTuple,
    NewWithdrawalEvent.OutputTuple,
    NewWithdrawalEvent.OutputObject
  >;

  filters: {
    "NewCommitment(bytes32,uint256,bytes)": TypedContractEvent<
      NewCommitmentEvent.InputTuple,
      NewCommitmentEvent.OutputTuple,
      NewCommitmentEvent.OutputObject
    >;
    NewCommitment: TypedContractEvent<
      NewCommitmentEvent.InputTuple,
      NewCommitmentEvent.OutputTuple,
      NewCommitmentEvent.OutputObject
    >;

    "NewNullifier(bytes32)": TypedContractEvent<
      NewNullifierEvent.InputTuple,
      NewNullifierEvent.OutputTuple,
      NewNullifierEvent.OutputObject
    >;
    NewNullifier: TypedContractEvent<
      NewNullifierEvent.InputTuple,
      NewNullifierEvent.OutputTuple,
      NewNullifierEvent.OutputObject
    >;

    "NewTxRecord(bytes32,bytes32,bytes32,bytes32,uint256,uint32)": TypedContractEvent<
      NewTxRecordEvent.InputTuple,
      NewTxRecordEvent.OutputTuple,
      NewTxRecordEvent.OutputObject
    >;
    NewTxRecord: TypedContractEvent<
      NewTxRecordEvent.InputTuple,
      NewTxRecordEvent.OutputTuple,
      NewTxRecordEvent.OutputObject
    >;

    "NewWithdrawal(address,uint256,string,bytes32[2])": TypedContractEvent<
      NewWithdrawalEvent.InputTuple,
      NewWithdrawalEvent.OutputTuple,
      NewWithdrawalEvent.OutputObject
    >;
    NewWithdrawal: TypedContractEvent<
      NewWithdrawalEvent.InputTuple,
      NewWithdrawalEvent.OutputTuple,
      NewWithdrawalEvent.OutputObject
    >;
  };
}
