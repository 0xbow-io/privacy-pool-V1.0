// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "forge-std/Test.sol";
import "forge-std/console.sol";

import "../src/state/State.sol";
import "../src/interfaces/IState.sol";

import {IPrivacyPool} from "../src/interfaces/IPrivacyPool.sol";

/**
 *
 * @title TestState
 * @notice TestState contract is used to
 * test Privacy Pool State Contract
 *
 */
contract StateTester is Test, State {
    function Test_ApplyProofToState(IPrivacyPool.GROTH16Proof calldata proof, bytes memory expectedErrorMsg) public {
        // if expecting an error Msg, then assert it
        if (expectedErrorMsg.length > 0) {
            vm.expectRevert(expectedErrorMsg);
        }
        return ApplyProofToState(proof);
    }

    function Test_SeekRootIdx(uint256 _root) public view returns (bool ok, uint256 idx) {
        return SeekRootIdx(_root);
    }

    function Test_FetchCipherComponentsFromProof(IPrivacyPool.GROTH16Proof calldata _proof, uint8 _idx)
        public
        pure
        returns (
            uint256[D_CIPHERTEXT_SIZE] memory cipherText,
            uint256[D_KEY_SIZE] memory saltPubkey,
            uint256 commitmentHash
        )
    {
        return FetchCipherComponentsFromProof(_proof, _idx);
    }

    function Test_UnpackCiphersWithinRange(uint256 _startIdx, uint256 _endIdx)
        public
        view
        returns (
            uint256[D_CIPHERTEXT_SIZE][] memory cipherTexts,
            uint256[D_KEY_SIZE][] memory saltPubkeys,
            uint256[] memory commitmentHashes
        )
    {
        return UnpackCiphersWithinRange(_startIdx, _endIdx);
    }
}

contract TestState is Test {
    StateTester internal stateW;

    struct TestProofData {
        uint256[2] newNullRoot;
        uint256[2] newCommitmentRoot;
        uint256[2] newCommitmentHash;
        uint256[D_KEY_SIZE][2] _saltPubkey;
        uint256[D_CIPHERTEXT_SIZE][2] _cipherText;
        bytes expectedErrorMsg;
    }

    function setUp() public {
        stateW = new StateTester();
    }

    function Invoke_ApplyProofToState(
        uint256[2] memory newNullRoot,
        uint256[2] memory newCommitmentRoot,
        uint256[2] memory newCommitmentHash,
        uint256[D_KEY_SIZE][2] memory _saltPubkey,
        uint256[D_CIPHERTEXT_SIZE][2] memory _cipherText,
        bytes memory expectedErrorMsg
    ) public {
        stateW.Test_ApplyProofToState(
            IPrivacyPool.GROTH16Proof({
                _pA: [uint256(0), uint256(0)],
                _pB: [[uint256(0), uint256(0)], [uint256(0), uint256(0)]],
                _pC: [uint256(0), uint256(0)],
                _pubSignals: [
                    newNullRoot[0],
                    newNullRoot[1],
                    0,
                    0,
                    0,
                    0,
                    newCommitmentRoot[0],
                    newCommitmentRoot[1],
                    0,
                    0,
                    newCommitmentHash[0],
                    newCommitmentHash[1],
                    574,
                    0,
                    100,
                    356,
                    0,
                    0,
                    _saltPubkey[0][0],
                    _saltPubkey[0][1],
                    _saltPubkey[1][0],
                    _saltPubkey[1][1],
                    _cipherText[0][0],
                    _cipherText[0][1],
                    _cipherText[0][2],
                    _cipherText[0][3],
                    _cipherText[0][4],
                    _cipherText[0][5],
                    _cipherText[0][6],
                    _cipherText[1][0],
                    _cipherText[1][1],
                    _cipherText[1][2],
                    _cipherText[1][3],
                    _cipherText[1][4],
                    _cipherText[1][5],
                    _cipherText[1][6]
                ]
            }),
            expectedErrorMsg
        );
    }

    function test_FetchCipherComponentsFromProof() public view {
        TestProofData[3] memory td = [
            // Test Case 1
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    7693650792535944309452694493764107138652740190734382403591779890211701663605,
                    8332886049255157997897576635845085046397756573432925624911262188442327935254
                ],
                newCommitmentRoot: [
                    9496793602174919810723858882124603036908389592504512643637323741931405449085,
                    6202671744449709621192808765624479254966757513761261484453295308653908329493
                ],
                newCommitmentHash: [
                    16864955148287088946842576079859418432787836674015622617999139748100038136405,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        21528457483583280411753028531901620312237089274847960563021336640857834418699,
                        10614994122642417164688808699760907503216509546045162440409909626763139960863
                    ],
                    [
                        5584938431108439997514916541132048132489029333822375677542003800112253840358,
                        16136605410080764180503115913550364414140989282170276123142015006695527213423
                    ]
                ],
                _cipherText: [
                    [
                        4781618202464087118337616074837306604702491838146321730347059136614830439136,
                        8962831868945205660408934816055352591484223972280618644170883957928286324027,
                        21384596910376320005791636726247972728782509931693299295806373670234014789923,
                        19939760316830971191912996463037099306874905145544706896149638569778863693138,
                        19074242817529547322813306973594771250178794318761916817658710691244255893990,
                        12530639832490968738674580010439410240778183436140696296831901761521363309451,
                        17955352242075934460935273963165980657254337141096849008154670394393611193765
                    ],
                    [
                        5545891046532318308770522863017298500282056804784316886490177481244886474574,
                        18515411770800971293263636457924590143863459558793018898140792287443642568136,
                        19046068441698453990067847994784652073224746560398398261348622888333286786414,
                        20528115118608956124442740913444059062050076552089467653756913288349791480627,
                        8566406914488357772800875381072995408570671686191691826902092764435748617185,
                        19676165693431616505936801256461309240117986919332206731548384604161814377678,
                        10035414411485376409621521477703326463858198304632535129897787921574267309587
                    ]
                ],
                expectedErrorMsg: ""
            }),
            // Test Case 2
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    3884907964568207510713558441059824433241500446936341849482553912712410552914,
                    9337001113260728334651601408364839769939396035633518341352817147281264860048
                ],
                newCommitmentRoot: [
                    6031728182516706763050100585312136007822049826775215146822946276944748238935,
                    14359553998792503818352500622779002793474959711312650855774421617828507767069
                ],
                newCommitmentHash: [
                    613531221795985578884439732044599035482679461118712215338523659543542935111,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        3445450406720373642950541157102463025234903417840717760820882280522072325353,
                        1279138886852201703193263994375265435209324551383928399769884777739616537813
                    ],
                    [
                        8257746070605862373933968775580008712788386963064016818958217099220918518552,
                        15459904260621268577090344148476974803442349174774004085314118651471653148428
                    ]
                ],
                _cipherText: [
                    [
                        809339960727057994250004003579042514009034364071520264226906114016717145596,
                        16859968221462925327796912037788846008324342287792237518581801314782857330585,
                        7661516756302626334407117653426355599663036187667707410368166139404851713173,
                        8909110287501927614124685629232282546730812041707857711913033585818085965469,
                        10261493963948389205953490735743753813871573618447303920681899342483254559034,
                        17826879155778068531844749949878847782197071623532518478054735301856515830990,
                        8400785092251578013632422102429466693938939916439715042817712322190110884004
                    ],
                    [
                        7647878046315832127230086326424513350987321513538189594214295964236002011287,
                        12213547546031076690704099678436253916388288697487362224278350762070059887641,
                        19967646103194913467677209686285498692841930973963328422809042713453087959158,
                        13551287342384467223104243335332908714761108427229483911113632697985258011035,
                        18189135124602088645015839547826130518225477262062919670416131167430462835705,
                        6556315865057749576745888613899931121495954122307383719571040563034226195758,
                        20573181068956339242858247546713933418549414529277386772076533989957561600332
                    ]
                ],
                expectedErrorMsg: ""
            }),
            // Test Case 3
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    3172612488478953580279362818371725202761789504749917604724193689405701768368,
                    16288865118272049793559673223784309151830128319432060838068898455637626240600
                ],
                newCommitmentRoot: [
                    15210603479689686109010595790817489536641406423205958222798942669338709410788,
                    20306042567452209337662015261731274049991866329545243190517575281866016608235
                ],
                newCommitmentHash: [
                    645649536081626196451526700269651063719990067971516576461100249537793001692,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        2219062979023611811861085510836275248255648204327247800679496527679129219819,
                        9642867717322383106658737245942421498713297324189630105474578505020198516643
                    ],
                    [
                        13394555262505773102793851484156322430012674117257378081464830818143967863269,
                        10406476594046402408128452831048928082578909449643745680121105309279902038790
                    ]
                ],
                _cipherText: [
                    [
                        20601122784704152638873263422502797855805305804734369267062465842637504165504,
                        62328223506917533195673449786234999576378862445965831869558050749772810197,
                        9748031698586836229361143548150514675844056763618942633216009237194033348070,
                        13564301731852968653529684315744681249647503211720094839111457392546305613775,
                        12373299175323763857258267788294217236026495293187276177061602500723806218956,
                        11244847281222708663779952766205056170901972649458140664435703846804535920689,
                        14065364428714083805606441972585565912024766769461153336138439490054179025849
                    ],
                    [
                        1962952799236027841385253360873304671068851532596801960328301229311310868042,
                        8126586826569132218909466483555412076097044443669623495914215182183657386145,
                        20004613455599508757511538147351793507015361370340365388039739240168838173109,
                        4280098583345532705012420289574051002368756373895596468057881037557293018694,
                        19590972366074278509719504893017730150188367604433702218181590177975606340492,
                        19961930076421741427317634914589249822876835859691652881920719361873070355803,
                        450589424369835798130177195106747356822306270739118335740618631375888434692
                    ]
                ],
                expectedErrorMsg: ""
            })
        ];
        for (uint256 i = 0; i < td.length; i++) {
            for (uint8 j = 0; j < 2; j++) {
                (
                    uint256[D_CIPHERTEXT_SIZE] memory cipherText,
                    uint256[D_KEY_SIZE] memory saltPubkey,
                    uint256 commitmentHash
                ) = stateW.Test_FetchCipherComponentsFromProof(
                    IPrivacyPool.GROTH16Proof({
                        _pA: [uint256(0), uint256(0)],
                        _pB: [[uint256(0), uint256(0)], [uint256(0), uint256(0)]],
                        _pC: [uint256(0), uint256(0)],
                        _pubSignals: [
                            td[i].newNullRoot[0],
                            td[i].newNullRoot[1],
                            0,
                            0,
                            0,
                            0,
                            td[i].newCommitmentRoot[0],
                            td[i].newCommitmentRoot[1],
                            0,
                            0,
                            td[i].newCommitmentHash[0],
                            td[i].newCommitmentHash[1],
                            574,
                            0,
                            100,
                            356,
                            0,
                            0,
                            td[i]._saltPubkey[0][0],
                            td[i]._saltPubkey[0][1],
                            td[i]._saltPubkey[1][0],
                            td[i]._saltPubkey[1][1],
                            td[i]._cipherText[0][0],
                            td[i]._cipherText[0][1],
                            td[i]._cipherText[0][2],
                            td[i]._cipherText[0][3],
                            td[i]._cipherText[0][4],
                            td[i]._cipherText[0][5],
                            td[i]._cipherText[0][6],
                            td[i]._cipherText[1][0],
                            td[i]._cipherText[1][1],
                            td[i]._cipherText[1][2],
                            td[i]._cipherText[1][3],
                            td[i]._cipherText[1][4],
                            td[i]._cipherText[1][5],
                            td[i]._cipherText[1][6]
                        ]
                    }),
                    j
                );
                // perform a deep comparison
                for (uint256 k = 0; k < D_CIPHERTEXT_SIZE; k++) {
                    assertEq(cipherText[k], td[i]._cipherText[j][k], "cipherText mismatch");
                }
                for (uint256 k = 0; k < D_KEY_SIZE; k++) {
                    assertEq(saltPubkey[k], td[i]._saltPubkey[j][k], "saltPubkey mismatch");
                }
                assertEq(commitmentHash, td[i].newCommitmentHash[j], "commitmentHash mismatch");
            }
        }
    }

    /**
     * @dev Test the ApplyProofToState function with positive test cases
     */
    function test_ApplyProofToStatePositive() public {
        TestProofData[3] memory td = [
            // Test Case 1
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    7693650792535944309452694493764107138652740190734382403591779890211701663605,
                    8332886049255157997897576635845085046397756573432925624911262188442327935254
                ],
                newCommitmentRoot: [
                    9496793602174919810723858882124603036908389592504512643637323741931405449085,
                    6202671744449709621192808765624479254966757513761261484453295308653908329493
                ],
                newCommitmentHash: [
                    16864955148287088946842576079859418432787836674015622617999139748100038136405,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        21528457483583280411753028531901620312237089274847960563021336640857834418699,
                        10614994122642417164688808699760907503216509546045162440409909626763139960863
                    ],
                    [
                        5584938431108439997514916541132048132489029333822375677542003800112253840358,
                        16136605410080764180503115913550364414140989282170276123142015006695527213423
                    ]
                ],
                _cipherText: [
                    [
                        4781618202464087118337616074837306604702491838146321730347059136614830439136,
                        8962831868945205660408934816055352591484223972280618644170883957928286324027,
                        21384596910376320005791636726247972728782509931693299295806373670234014789923,
                        19939760316830971191912996463037099306874905145544706896149638569778863693138,
                        19074242817529547322813306973594771250178794318761916817658710691244255893990,
                        12530639832490968738674580010439410240778183436140696296831901761521363309451,
                        17955352242075934460935273963165980657254337141096849008154670394393611193765
                    ],
                    [
                        5545891046532318308770522863017298500282056804784316886490177481244886474574,
                        18515411770800971293263636457924590143863459558793018898140792287443642568136,
                        19046068441698453990067847994784652073224746560398398261348622888333286786414,
                        20528115118608956124442740913444059062050076552089467653756913288349791480627,
                        8566406914488357772800875381072995408570671686191691826902092764435748617185,
                        19676165693431616505936801256461309240117986919332206731548384604161814377678,
                        10035414411485376409621521477703326463858198304632535129897787921574267309587
                    ]
                ],
                expectedErrorMsg: ""
            }),
            // Test Case 2
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    3884907964568207510713558441059824433241500446936341849482553912712410552914,
                    9337001113260728334651601408364839769939396035633518341352817147281264860048
                ],
                newCommitmentRoot: [
                    6031728182516706763050100585312136007822049826775215146822946276944748238935,
                    14359553998792503818352500622779002793474959711312650855774421617828507767069
                ],
                newCommitmentHash: [
                    613531221795985578884439732044599035482679461118712215338523659543542935111,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        3445450406720373642950541157102463025234903417840717760820882280522072325353,
                        1279138886852201703193263994375265435209324551383928399769884777739616537813
                    ],
                    [
                        8257746070605862373933968775580008712788386963064016818958217099220918518552,
                        15459904260621268577090344148476974803442349174774004085314118651471653148428
                    ]
                ],
                _cipherText: [
                    [
                        809339960727057994250004003579042514009034364071520264226906114016717145596,
                        16859968221462925327796912037788846008324342287792237518581801314782857330585,
                        7661516756302626334407117653426355599663036187667707410368166139404851713173,
                        8909110287501927614124685629232282546730812041707857711913033585818085965469,
                        10261493963948389205953490735743753813871573618447303920681899342483254559034,
                        17826879155778068531844749949878847782197071623532518478054735301856515830990,
                        8400785092251578013632422102429466693938939916439715042817712322190110884004
                    ],
                    [
                        7647878046315832127230086326424513350987321513538189594214295964236002011287,
                        12213547546031076690704099678436253916388288697487362224278350762070059887641,
                        19967646103194913467677209686285498692841930973963328422809042713453087959158,
                        13551287342384467223104243335332908714761108427229483911113632697985258011035,
                        18189135124602088645015839547826130518225477262062919670416131167430462835705,
                        6556315865057749576745888613899931121495954122307383719571040563034226195758,
                        20573181068956339242858247546713933418549414529277386772076533989957561600332
                    ]
                ],
                expectedErrorMsg: ""
            }),
            // Test Case 3
            // All valid values, should return no error here
            TestProofData({
                newNullRoot: [
                    3172612488478953580279362818371725202761789504749917604724193689405701768368,
                    16288865118272049793559673223784309151830128319432060838068898455637626240600
                ],
                newCommitmentRoot: [
                    15210603479689686109010595790817489536641406423205958222798942669338709410788,
                    20306042567452209337662015261731274049991866329545243190517575281866016608235
                ],
                newCommitmentHash: [
                    645649536081626196451526700269651063719990067971516576461100249537793001692,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        2219062979023611811861085510836275248255648204327247800679496527679129219819,
                        9642867717322383106658737245942421498713297324189630105474578505020198516643
                    ],
                    [
                        13394555262505773102793851484156322430012674117257378081464830818143967863269,
                        10406476594046402408128452831048928082578909449643745680121105309279902038790
                    ]
                ],
                _cipherText: [
                    [
                        20601122784704152638873263422502797855805305804734369267062465842637504165504,
                        62328223506917533195673449786234999576378862445965831869558050749772810197,
                        9748031698586836229361143548150514675844056763618942633216009237194033348070,
                        13564301731852968653529684315744681249647503211720094839111457392546305613775,
                        12373299175323763857258267788294217236026495293187276177061602500723806218956,
                        11244847281222708663779952766205056170901972649458140664435703846804535920689,
                        14065364428714083805606441972585565912024766769461153336138439490054179025849
                    ],
                    [
                        1962952799236027841385253360873304671068851532596801960328301229311310868042,
                        8126586826569132218909466483555412076097044443669623495914215182183657386145,
                        20004613455599508757511538147351793507015361370340365388039739240168838173109,
                        4280098583345532705012420289574051002368756373895596468057881037557293018694,
                        19590972366074278509719504893017730150188367604433702218181590177975606340492,
                        19961930076421741427317634914589249822876835859691652881920719361873070355803,
                        450589424369835798130177195106747356822306270739118335740618631375888434692
                    ]
                ],
                expectedErrorMsg: ""
            })
        ];
        for (uint256 i = 0; i < td.length; i++) {
            /**
             * Verify the initital state
             * SeekRootIdxs() for newNullRoots & newCommitmentRoots should not return valid idxs
             *
             */
            for (uint256 j = 0; j < 2; j++) {
                (bool ok, uint256 idx) = stateW.Test_SeekRootIdx(td[i].newNullRoot[j]);
                assertEq(ok, false);
                assertEq(idx, 0);

                (ok, idx) = stateW.Test_SeekRootIdx(td[i].newCommitmentRoot[j]);
                assertEq(ok, false);
                assertEq(idx, 0);
            }

            Invoke_ApplyProofToState(
                td[i].newNullRoot,
                td[i].newCommitmentRoot,
                td[i].newCommitmentHash,
                td[i]._saltPubkey,
                td[i]._cipherText,
                ""
            );
            /**
             * Verify the state update
             * SeekRootIdxs() for newNullRoots & newCommitmentRoots should return valid idxs
             * UnpackCipherAtIdx() at the i && i * 2 + 1 should return the correct values
             *
             */
            for (uint256 j = 0; j < 2; j++) {
                (bool ok, uint256 idx) = stateW.Test_SeekRootIdx(td[i].newNullRoot[j]);
                assertEq(ok, true);
                assertEq(idx, i * 4 + j);

                (ok, idx) = stateW.Test_SeekRootIdx(td[i].newCommitmentRoot[j]);
                assertEq(ok, true);
                assertEq(idx, i * 4 + j + 2);
            }

            // try to unpack the ciphers from the expected index
            (
                uint256[D_CIPHERTEXT_SIZE][] memory cipherTexts,
                uint256[D_KEY_SIZE][] memory saltPubkeys,
                uint256[] memory commitmentHashes
            ) = stateW.Test_UnpackCiphersWithinRange(i * 2, i * 2 + 1);

            // preform a deep comparison
            for (uint256 j = 0; j < cipherTexts.length; j++) {
                for (uint256 k = 0; k < cipherTexts[j].length; k++) {
                    assertEq(cipherTexts[j][k], td[i]._cipherText[j][k], "cipherText mismatch");
                }
            }
            for (uint256 j = 0; j < saltPubkeys.length; j++) {
                for (uint256 k = 0; k < saltPubkeys[j].length; k++) {
                    assertEq(saltPubkeys[j][k], td[i]._saltPubkey[j][k], "saltPubkey mismatch");
                }
            }
            for (uint256 j = 0; j < commitmentHashes.length; j++) {
                assertEq(commitmentHashes[j], td[i].newCommitmentHash[j], "commitmentHash mismatch");
            }
        }
    }

    /**
     * @dev Test the ApplyProofToState function with negative test cases
     */
    function test_ApplyProofToStatenegative() public {
        TestProofData[3] memory td = [
            // Test Case 1
            // Duplicate Null-roots
            TestProofData({
                newNullRoot: [
                    7693650792535944309452694493764107138652740190734382403591779890211701663605,
                    7693650792535944309452694493764107138652740190734382403591779890211701663605
                ],
                newCommitmentRoot: [
                    9496793602174919810723858882124603036908389592504512643637323741931405449085,
                    6202671744449709621192808765624479254966757513761261484453295308653908329493
                ],
                newCommitmentHash: [
                    16864955148287088946842576079859418432787836674015622617999139748100038136405,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        21528457483583280411753028531901620312237089274847960563021336640857834418699,
                        10614994122642417164688808699760907503216509546045162440409909626763139960863
                    ],
                    [
                        5584938431108439997514916541132048132489029333822375677542003800112253840358,
                        16136605410080764180503115913550364414140989282170276123142015006695527213423
                    ]
                ],
                _cipherText: [
                    [
                        4781618202464087118337616074837306604702491838146321730347059136614830439136,
                        8962831868945205660408934816055352591484223972280618644170883957928286324027,
                        21384596910376320005791636726247972728782509931693299295806373670234014789923,
                        19939760316830971191912996463037099306874905145544706896149638569778863693138,
                        19074242817529547322813306973594771250178794318761916817658710691244255893990,
                        12530639832490968738674580010439410240778183436140696296831901761521363309451,
                        17955352242075934460935273963165980657254337141096849008154670394393611193765
                    ],
                    [
                        5545891046532318308770522863017298500282056804784316886490177481244886474574,
                        18515411770800971293263636457924590143863459558793018898140792287443642568136,
                        19046068441698453990067847994784652073224746560398398261348622888333286786414,
                        20528115118608956124442740913444059062050076552089467653756913288349791480627,
                        8566406914488357772800875381072995408570671686191691826902092764435748617185,
                        19676165693431616505936801256461309240117986919332206731548384604161814377678,
                        10035414411485376409621521477703326463858198304632535129897787921574267309587
                    ]
                ],
                expectedErrorMsg: abi.encodeWithSelector(
                    IState.NullRootExists.selector, 7693650792535944309452694493764107138652740190734382403591779890211701663605
                )
            }),
            // Test Case 2
            // newNullRoot & newCommitmentRoot equal
            TestProofData({
                newNullRoot: [
                    3884907964568207510713558441059824433241500446936341849482553912712410552914,
                    9337001113260728334651601408364839769939396035633518341352817147281264860048
                ],
                newCommitmentRoot: [
                    3884907964568207510713558441059824433241500446936341849482553912712410552914,
                    8332886049255157997897576635845085046397756573432925624911262188442327935254
                ],
                newCommitmentHash: [
                    16864955148287088946842576079859418432787836674015622617999139748100038136405,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        21528457483583280411753028531901620312237089274847960563021336640857834418699,
                        10614994122642417164688808699760907503216509546045162440409909626763139960863
                    ],
                    [
                        5584938431108439997514916541132048132489029333822375677542003800112253840358,
                        16136605410080764180503115913550364414140989282170276123142015006695527213423
                    ]
                ],
                _cipherText: [
                    [
                        4781618202464087118337616074837306604702491838146321730347059136614830439136,
                        8962831868945205660408934816055352591484223972280618644170883957928286324027,
                        21384596910376320005791636726247972728782509931693299295806373670234014789923,
                        19939760316830971191912996463037099306874905145544706896149638569778863693138,
                        19074242817529547322813306973594771250178794318761916817658710691244255893990,
                        12530639832490968738674580010439410240778183436140696296831901761521363309451,
                        17955352242075934460935273963165980657254337141096849008154670394393611193765
                    ],
                    [
                        5545891046532318308770522863017298500282056804784316886490177481244886474574,
                        18515411770800971293263636457924590143863459558793018898140792287443642568136,
                        19046068441698453990067847994784652073224746560398398261348622888333286786414,
                        20528115118608956124442740913444059062050076552089467653756913288349791480627,
                        8566406914488357772800875381072995408570671686191691826902092764435748617185,
                        19676165693431616505936801256461309240117986919332206731548384604161814377678,
                        10035414411485376409621521477703326463858198304632535129897787921574267309587
                    ]
                ],
                expectedErrorMsg: abi.encodeWithSelector(
                    IState.CommitmentRootExists.selector,
                    3884907964568207510713558441059824433241500446936341849482553912712410552914
                )
            }),
            // Test Case 3
            // Duplicate Commitment-roots
            TestProofData({
                newNullRoot: [
                    7693650792535944309452694493764107138652740190734382403591779890211701663605,
                    8332886049255157997897576635845085046397756573432925624911262188442327935254
                ],
                newCommitmentRoot: [
                    9496793602174919810723858882124603036908389592504512643637323741931405449085,
                    9496793602174919810723858882124603036908389592504512643637323741931405449085
                ],
                newCommitmentHash: [
                    16864955148287088946842576079859418432787836674015622617999139748100038136405,
                    14889106458831651818035422305116181532836402325375434055584405801347344902946
                ],
                _saltPubkey: [
                    [
                        21528457483583280411753028531901620312237089274847960563021336640857834418699,
                        10614994122642417164688808699760907503216509546045162440409909626763139960863
                    ],
                    [
                        5584938431108439997514916541132048132489029333822375677542003800112253840358,
                        16136605410080764180503115913550364414140989282170276123142015006695527213423
                    ]
                ],
                _cipherText: [
                    [
                        4781618202464087118337616074837306604702491838146321730347059136614830439136,
                        8962831868945205660408934816055352591484223972280618644170883957928286324027,
                        21384596910376320005791636726247972728782509931693299295806373670234014789923,
                        19939760316830971191912996463037099306874905145544706896149638569778863693138,
                        19074242817529547322813306973594771250178794318761916817658710691244255893990,
                        12530639832490968738674580010439410240778183436140696296831901761521363309451,
                        17955352242075934460935273963165980657254337141096849008154670394393611193765
                    ],
                    [
                        5545891046532318308770522863017298500282056804784316886490177481244886474574,
                        18515411770800971293263636457924590143863459558793018898140792287443642568136,
                        19046068441698453990067847994784652073224746560398398261348622888333286786414,
                        20528115118608956124442740913444059062050076552089467653756913288349791480627,
                        8566406914488357772800875381072995408570671686191691826902092764435748617185,
                        19676165693431616505936801256461309240117986919332206731548384604161814377678,
                        10035414411485376409621521477703326463858198304632535129897787921574267309587
                    ]
                ],
                expectedErrorMsg: abi.encodeWithSelector(
                    IState.CommitmentRootExists.selector,
                    9496793602174919810723858882124603036908389592504512643637323741931405449085
                )
            })
        ];
        for (uint256 i = 0; i < td.length; i++) {
            Invoke_ApplyProofToState(
                td[i].newNullRoot,
                td[i].newCommitmentRoot,
                td[i].newCommitmentHash,
                td[i]._saltPubkey,
                td[i]._cipherText,
                td[i].expectedErrorMsg
            );
        }
    }
}
